import { GoogleGenerativeAI, GoogleGenerativeAIError, GenerativeModel, GenerateContentResult } from '@google/generative-ai';
import { format } from 'date-fns';

if (!process.env.GOOGLE_API_KEY) {
  console.error("‚ùå FATAL: GEMINI_API_KEY n√£o est√° definida nas vari√°veis de ambiente.");
  throw new Error('GEMINI_API_KEY n√£o est√° definida nas vari√°veis de ambiente');
}

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

export interface ExtractedFilters {
  palavrasChave: string[];
  sinonimos: string[][];
  valorMin: number | null;
  valorMax: number | null;
  estado: string | null;
  modalidade: string | null;
  dataInicial: string | null;
  dataFinal: string | null;
  blacklist: string[];
  smartBlacklist: string[];
}

async function generateContentWithRetry(model: GenerativeModel, prompt: string, maxRetries = 3): Promise<GenerateContentResult> {
  let attempt = 0;
  while (attempt < maxRetries) {
    try {
      const result = await model.generateContent(prompt);
      return result;
    } catch (error) {
      if (error instanceof GoogleGenerativeAIError && error.message.includes('503')) {
        attempt++;
        if (attempt >= maxRetries) {
          console.error(`‚ùå Falha na chamada ao Gemini ap√≥s ${maxRetries} tentativas. √öltimo erro:`, error);
          throw new Error(`O servi√ßo de IA est√° temporariamente sobrecarregado. Por favor, tente novamente em alguns instantes. (Error: 503)`);
        }
        const delay = Math.pow(2, attempt) * 1000;
        console.warn(`‚ö†Ô∏è Servi√ßo do Gemini sobrecarregado (503). Tentando novamente em ${delay / 1000}s... (Tentativa ${attempt}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        throw error;
      }
    }
  }
  throw new Error('Falha ao gerar conte√∫do ap√≥s m√∫ltiplas tentativas.');
}


export async function extractFilters(question: string, userBlacklist: string[] = []): Promise<ExtractedFilters> {
  const defaultResponse: ExtractedFilters = {
    palavrasChave: [],
    sinonimos: [],
    valorMin: null,
    valorMax: null,
    estado: null,
    modalidade: null,
    dataInicial: null,
    dataFinal: null,
    blacklist: userBlacklist,
    smartBlacklist: [],
  };

  if (!question || typeof question !== 'string' || !question.trim()) {
    console.warn("‚ö†Ô∏è extractFilters chamada com pergunta inv√°lida. Retornando resposta padr√£o.");
    defaultResponse.blacklist = userBlacklist;
    return defaultResponse;
  }
  console.log(`üß† Chamando Gemini para extrair filtros de: "${question}"`);

  const hoje = new Date();
  const dataAtualFormatada = format(hoje, 'yyyy-MM-dd');

  const prompt = `
<MISSION>
Voc√™ √© um assistente de IA especialista em licita√ß√µes p√∫blicas no Brasil, atuando como um analista de licita√ß√µes para a empresa SOLU√á√ïES SERVI√áOS TERCEIRIZADOS LTDA (CNPJ 09.445.502/0001-09). Sua fun√ß√£o √© analisar a solicita√ß√£o do usu√°rio e convert√™-la em um objeto JSON estrito e preciso, otimizando a busca por oportunidades de neg√≥cio relevantes para a empresa. A sua sa√≠da deve ser APENAS o objeto JSON.
</MISSION>

<CONTEXT>
A data de refer√™ncia (hoje) √©: ${dataAtualFormatada}.

**√ÅREAS DE ATUA√á√ÉO PRINCIPAIS (O QUE A EMPRESA FAZ):**
Esta √© a lista de ramos de atua√ß√£o da empresa. Use-a como base principal para identificar palavras-chave e sin√¥nimos.

1.  **Alimenta√ß√£o (Prisional, Hospitalar, Escolar):**
    * **Termos-chave**: "alimenta√ß√£o prisional", "alimenta√ß√£o hospitalar", "merenda escolar", "refei√ß√µes coletivas", "nutri√ß√£o", "PNAE".
    * **Sin√¥nimos**: "refei√ß√µes para pres√≠dios", "refei√ß√µes para hospitais", "alimenta√ß√£o escolar", "gest√£o de refeit√≥rio", "kit lanche", "dieta hospitalar".

2.  **Facilities e M√£o de Obra:**
    * **Termos-chave**: "fornecimento de m√£o de obra", "terceiriza√ß√£o de servi√ßos", "facilities", "postos de trabalho", "servi√ßos continuados".
    * **Sin√¥nimos**: "apoio administrativo", "recepcionista", "porteiro", "copeiragem", "servi√ßos gerais", "m√£o de obra dedicada".

3.  **Limpeza e Conserva√ß√£o (Predial, Escolar, Hospitalar):**
    * **Termos-chave**: "limpeza predial", "limpeza e conserva√ß√£o", "limpeza hospitalar", "higieniza√ß√£o de ambientes".
    * **Sin√¥nimos**: "servi√ßos de limpeza", "assepsia", "desinfec√ß√£o hospitalar", "limpeza terminal", "tratamento de piso".

4.  **Frota com Motorista:**
    * **Termos-chave**: "loca√ß√£o de frota com motorista", "aluguel de ve√≠culos com condutor", "transporte de passageiros".
    * **Sin√¥nimos**: "transporte executivo", "terceiriza√ß√£o de frota com motorista", "ve√≠culos com motorista √† disposi√ß√£o".

5.  **Engenharia e Manuten√ß√£o Predial:**
    * **Termos-chave**: "manuten√ß√£o predial", "reforma predial", "servi√ßos de engenharia civil", "obras de pequeno porte".
    * **Sin√¥nimos**: "manuten√ß√£o preventiva", "manuten√ß√£o corretiva", "pequenas reformas", "edifica√ß√µes".

6.  **Cogest√£o Prisional e PPPs:**
    * **Termos-chave**: "cogest√£o prisional", "gest√£o compartilhada de unidade prisional", "PPP", "parceria p√∫blico-privada", "concess√£o administrativa".
    * **Sin√¥nimos**: "administra√ß√£o prisional", "concess√£o patrocinada", "PMI", "edital de manifesta√ß√£o de interesse".

**√ÅREAS DE N√ÉO-INTERESSE (O QUE A EMPRESA N√ÉO FAZ):**
Esta lista cont√©m exemplos de servi√ßos que **N√ÉO** s√£o o foco da empresa. Use-a para popular a 'smartBlacklist' e refinar a busca, especialmente em consultas gen√©ricas.
* **Eventos e Cultura**: "buffet", "coquetel", "organiza√ß√£o de eventos", "shows", "bandas", "decora√ß√£o natalina", "fogos de artif√≠cio", "camarim", "desfile".
* **Alimenta√ß√£o Varejo/Espec√≠fica**: "p√£o", "confeitaria", "padaria", "picol√©", "algod√£o doce", "coffee break".
* **Servi√ßos de Obras Espec√≠ficas**: "recapeamento asf√°ltico", "constru√ß√£o de pontes", "grandes obras de infraestrutura".
* **Controle de Pragas**: "dedetiza√ß√£o", "desratiza√ß√£o", "controle de pombos".
* **Servi√ßos Automotivos**: "leil√£o de ve√≠culos", "lavagem automotiva", "loca√ß√£o de ve√≠culo sem motorista".
* **Educa√ß√£o e Social**: "cursos", "palestras", "trabalho social", "vagas de est√°gio".
* **Outros**: "seguran√ßa privada/vigil√¢ncia armada", "consultoria", "assessoria", "leiloeiros", "servi√ßos veterin√°rios", "viagens e hotelaria".

**Modalidades de Licita√ß√£o Conhecidas**: "Leil√£o Eletr√¥nico", "Leil√£o Presencial", "Di√°logo Competitivo", "Concurso", "Concorr√™ncia Eletr√¥nica", "Concorr√™ncia Presencial", "Preg√£o Eletr√¥nico", "Preg√£o Presencial", "Dispensa de Licita√ß√£o", "Inexigibilidade de Licita√ß√£o", "Manifesta√ß√£o de Interesse", "Pr√©-qualifica√ß√£o", "Credenciamento".
</CONTEXT>

<RULES>
1.  **JSON Estrito**: Sua sa√≠da deve ser **exclusivamente** um objeto JSON v√°lido, sem nenhum texto, explica√ß√£o ou formata√ß√£o adicional.
2.  **Mapeamento de Termos**: Se a pergunta do usu√°rio corresponder a uma ou mais **√ÅREAS DE ATUA√á√ÉO PRINCIPAIS**, popule 'palavrasChave' com os "Termos-chave" e 'sinonimos' com os "Sin√¥nimos" dos ramos correspondentes.
3.  **Blacklist do Usu√°rio**: Extraia termos que o usu√°rio explicitamente **N√ÉO** deseja ver (indicados por "exceto", "sem", "n√£o quero", "excluindo"). Popule o array 'blacklist' apenas com esses termos.
4.  **Smart Blacklist (Filtro Inteligente)**:
    * **Se a busca for FOCADA** em uma ou mais √°reas de atua√ß√£o (ex: "quero limpeza hospitalar"), preencha a 'smartBlacklist' com termos das **√ÅREAS DE N√ÉO-INTERESSE**.
    * **Se a busca for GEN√âRICA** (ex: "licita√ß√µes abertas em SP" ou "qualquer licita√ß√£o"), preencha a 'smartBlacklist' de forma agressiva com **TODOS** os termos das **√ÅREAS DE N√ÉO-INTERESSE** para garantir que apenas resultados relevantes para a empresa sejam retornados.
5.  **Interpreta√ß√£o de Dados**:
    * **Datas**: Hoje √© ${dataAtualFormatada}. Use o formato YYYY-MM-DD. Se nenhum per√≠odo for mencionado, 'dataInicial' e 'dataFinal' devem ser null.
    * **Valores**: Interprete "mil" como 1000, "milh√£o" como 1000000. "acima de X" √© 'valorMin', "abaixo de X" √© 'valorMax'.
    * **Estado**: Retorne a sigla em mai√∫sculas (ex: "Rio de Janeiro" -> "RJ").
    * **Modalidade**: Identifique a modalidade a partir da lista de modalidades conhecidas.

</RULES>

<EXAMPLES>
* **Exemplo 1 (Busca Focada):**
    * **Pergunta**: "Quero ver as licita√ß√µes de alimenta√ß√£o prisional e hospitalar no estado de Minas Gerais."
    * **JSON Esperado**:
        {
          "palavrasChave": ["alimenta√ß√£o prisional", "refei√ß√µes para pres√≠dios", "alimenta√ß√£o hospitalar", "refei√ß√µes para hospitais"],
          "sinonimos": [["alimenta√ß√£o para detentos", "gest√£o de refeit√≥rio prisional"], ["gest√£o de refeit√≥rio hospitalar", "nutri√ß√£o cl√≠nica"]],
          "valorMin": null,
          "valorMax": null,
          "estado": "MG",
          "modalidade": null,
          "dataInicial": null,
          "dataFinal": null,
          "blacklist": [],
          "smartBlacklist": ["buffet", "coquetel", "p√£o", "padaria", "dedetiza√ß√£o", "leil√£o de ve√≠culos", "cursos", "seguran√ßa privada"]
        }
* **Exemplo 2 (Busca Gen√©rica):**
    * **Pergunta**: "me mostre as licita√ß√µes de hoje"
    * **JSON Esperado**:
        {
          "palavrasChave": [],
          "sinonimos": [],
          "valorMin": null,
          "valorMax": null,
          "estado": null,
          "modalidade": null,
          "dataInicial": "${dataAtualFormatada}",
          "dataFinal": "${dataAtualFormatada}",
          "blacklist": [],
          "smartBlacklist": ["buffet", "coquetel", "organiza√ß√£o de eventos", "shows", "bandas", "decora√ß√£o natalina", "fogos de artif√≠cio", "camarim", "desfile", "p√£o", "confeitaria", "padaria", "picol√©", "algod√£o doce", "coffee break", "recapeamento asf√°ltico", "constru√ß√£o de pontes", "grandes obras de infraestrutura", "dedetiza√ß√£o", "desratiza√ß√£o", "controle de pombos", "leil√£o de ve√≠culos", "lavagem automotiva", "loca√ß√£o de ve√≠culo sem motorista", "cursos", "palestras", "trabalho social", "vagas de est√°gio", "seguran√ßa privada/vigil√¢ncia armada", "consultoria", "assessoria", "leiloeiros", "servi√ßos veterin√°rios", "viagens e hotelaria"]
        }
* **Exemplo 3 (Busca com Exclus√£o):**
    * **Pergunta**: "licita√ß√µes de facilities acima de 500 mil, sem copeiragem"
    * **JSON Esperado**:
        {
          "palavrasChave": ["fornecimento de m√£o de obra", "terceiriza√ß√£o de servi√ßos", "facilities"],
          "sinonimos": [["apoio administrativo", "recepcionista", "porteiro", "servi√ßos gerais"]],
          "valorMin": 500000,
          "valorMax": null,
          "estado": null,
          "modalidade": null,
          "dataInicial": null,
          "dataFinal": null,
          "blacklist": ["copeiragem"],
          "smartBlacklist": ["buffet", "coquetel", "p√£o", "dedetiza√ß√£o", "leil√£o de ve√≠culos", "cursos", "seguran√ßa privada"]
        }
</EXAMPLES>

<OUTPUT_FORMAT>
Sua √∫nica sa√≠da deve ser um objeto JSON v√°lido, aderindo √† seguinte estrutura:
{
  "palavrasChave": ["string"],
  "sinonimos": [["string"]],
  "valorMin": number | null,
  "valorMax": number | null,
  "estado": string | null,
  "modalidade": string | null,
  "dataInicial": string | null,
  "dataFinal": string | null,
  "blacklist": ["string"],
  "smartBlacklist": ["string"]
}
</OUTPUT_FORMAT>
---
Agora, analise a pergunta abaixo e retorne APENAS o objeto JSON correspondente.
Pergunta do Usu√°rio: "${question}"
`;
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await generateContentWithRetry(model, prompt);

    const response = await result.response;
    const text = response.text();

    if (!text) throw new Error('Falha ao extrair filtros: resposta da IA vazia');

    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) throw new Error('Resposta da IA n√£o cont√©m um objeto JSON v√°lido.');

    const jsonText = jsonMatch[0];
    const parsedResponse = JSON.parse(jsonText) as Partial<ExtractedFilters>;
    const validatedResponse: ExtractedFilters = { ...defaultResponse };

    if (Array.isArray(parsedResponse.palavrasChave)) validatedResponse.palavrasChave = parsedResponse.palavrasChave.filter(kw => typeof kw === 'string');
    if (Array.isArray(parsedResponse.sinonimos)) validatedResponse.sinonimos = parsedResponse.sinonimos.map(s => Array.isArray(s) ? s.filter(i => typeof i === 'string') : []);
    if (typeof parsedResponse.valorMin === 'number') validatedResponse.valorMin = parsedResponse.valorMin;
    if (typeof parsedResponse.valorMax === 'number') validatedResponse.valorMax = parsedResponse.valorMax;
    if (typeof parsedResponse.estado === 'string') validatedResponse.estado = parsedResponse.estado.toUpperCase().trim();
    if (typeof parsedResponse.modalidade === 'string') validatedResponse.modalidade = parsedResponse.modalidade.trim();
    if (typeof parsedResponse.dataInicial === 'string') validatedResponse.dataInicial = parsedResponse.dataInicial;
    if (typeof parsedResponse.dataFinal === 'string') validatedResponse.dataFinal = parsedResponse.dataFinal;

    const explicitBlacklist = Array.isArray(parsedResponse.blacklist) ? parsedResponse.blacklist.filter(item => typeof item === 'string').map(item => item.toLowerCase()) : [];
    validatedResponse.blacklist = [...new Set([...userBlacklist.map(term => term.toLowerCase()), ...explicitBlacklist])];

    if (Array.isArray(parsedResponse.smartBlacklist)) validatedResponse.smartBlacklist = parsedResponse.smartBlacklist.filter(item => typeof item === 'string').map(item => item.toLowerCase());

    console.log("‚úÖ Filtros extra√≠dos e validados:", validatedResponse);
    return validatedResponse;

  } catch (error: unknown) {
    console.error('‚ùå Erro em extractFilters:', error);
    if (error instanceof Error) {
      throw new Error(`Falha na comunica√ß√£o com a IA Gemini: ${error.message}`);
    }
    throw new Error("Ocorreu um erro desconhecido durante a extra√ß√£o de filtros.");
  }
}