import { GoogleGenerativeAI, GoogleGenerativeAIError, GenerativeModel, GenerateContentResult } from '@google/generative-ai';
import { format } from 'date-fns';

if (!process.env.GOOGLE_API_KEY) {
  console.error("‚ùå FATAL: GEMINI_API_KEY n√£o est√° definida nas vari√°veis de ambiente.");
  throw new Error('GEMINI_API_KEY n√£o est√° definida nas vari√°veis de ambiente');
}

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

export interface ExtractedFilters {
  palavrasChave: string[];
  sinonimos: string[][];
  valorMin: number | null;
  valorMax: number | null;
  estado: string | null;
  modalidade: string | null;
  dataInicial: string | null;
  dataFinal: string | null;
  blacklist: string[];
  smartBlacklist: string[];
}

// ATUALIZA√á√ÉO: A fun√ß√£o agora usa os tipos corretos do SDK do Google.
async function generateContentWithRetry(model: GenerativeModel, prompt: string, maxRetries = 3): Promise<GenerateContentResult> {
  let attempt = 0;
  while (attempt < maxRetries) {
    try {
      const result = await model.generateContent(prompt);
      return result;
    } catch (error) {
      if (error instanceof GoogleGenerativeAIError && error.message.includes('503')) {
        attempt++;
        if (attempt >= maxRetries) {
          console.error(`‚ùå Falha na chamada ao Gemini ap√≥s ${maxRetries} tentativas. √öltimo erro:`, error);
          throw new Error(`O servi√ßo de IA est√° temporariamente sobrecarregado. Por favor, tente novamente em alguns instantes. (Error: 503)`);
        }
        const delay = Math.pow(2, attempt) * 1000;
        console.warn(`‚ö†Ô∏è Servi√ßo do Gemini sobrecarregado (503). Tentando novamente em ${delay / 1000}s... (Tentativa ${attempt}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        throw error;
      }
    }
  }
  // Este ponto s√≥ √© alcan√ßado se todas as tentativas falharem
  throw new Error('Falha ao gerar conte√∫do ap√≥s m√∫ltiplas tentativas.');
}


export async function extractFilters(question: string, userBlacklist: string[] = []): Promise<ExtractedFilters> {
  const defaultResponse: ExtractedFilters = {
    palavrasChave: [],
    sinonimos: [],
    valorMin: null,
    valorMax: null,
    estado: null,
    modalidade: null,
    dataInicial: null,
    dataFinal: null,
    blacklist: userBlacklist,
    smartBlacklist: [],
  };

  if (!question || typeof question !== 'string' || !question.trim()) {
    console.warn("‚ö†Ô∏è extractFilters chamada com pergunta inv√°lida. Retornando resposta padr√£o.");
    // Retorna a blacklist do usu√°rio mesmo em caso de pergunta inv√°lida
    defaultResponse.blacklist = userBlacklist;
    return defaultResponse;
  }
  console.log(`üß† Chamando Gemini para extrair filtros de: "${question}"`);

  const hoje = new Date();
  const dataAtualFormatada = format(hoje, 'yyyy-MM-dd');

  const prompt = `
<MISSION>
Voc√™ √© um assistente de IA altamente especializado em licita√ß√µes p√∫blicas no Brasil. Sua fun√ß√£o √© converter a pergunta do usu√°rio em um objeto JSON estrito, sem qualquer texto adicional.
</MISSION>

<CONTEXT>
A data de refer√™ncia (hoje) √©: ${dataAtualFormatada}.

Use esta lista de ramos de atua√ß√£o como base de conhecimento para mapear os termos da pergunta do usu√°rio:

1.  **Alimenta√ß√£o Prisional:**
    * **Termos-chave**: "alimenta√ß√£o prisional", "refei√ß√µes para pres√≠dios", "fornecimento de alimenta√ß√£o para unidades prisionais", "nutri√ß√£o prisional".
    * **Sin√¥nimos**: "alimenta√ß√£o para detentos", "gest√£o de refeit√≥rio prisional", "kit lanche para sistema prisional", "refei√ß√µes transportadas para pres√≠dios".

2.  **Alimenta√ß√£o Hospitalar:**
    * **Termos-chave**: "alimenta√ß√£o hospitalar", "refei√ß√µes para hospitais", "servi√ßos de nutri√ß√£o hospitalar", "dieta hospitalar".
    * **Sin√¥nimos**: "gest√£o de refeit√≥rio hospitalar", "nutri√ß√£o cl√≠nica", "alimenta√ß√£o enteral", "fornecimento de dietas para pacientes".

3.  **Merenda ou Alimenta√ß√£o Escolar:**
    * **Termos-chave**: "merenda escolar", "alimenta√ß√£o escolar", "refei√ß√µes para escolas", "PNAE", "programa nacional de alimenta√ß√£o escolar".
    * **Sin√¥nimos**: "fornecimento de merenda", "gest√£o de cantina escolar", "refeit√≥rio escolar", "kit merenda".

4.  **Frota com Motorista:**
    * **Termos-chave**: "loca√ß√£o de frota com motorista", "aluguel de ve√≠culos com condutor", "transporte executivo", "terceiriza√ß√£o de frota".
    * **Sin√¥nimos**: "servi√ßos de motorista", "transporte de passageiros", "ve√≠culos com motorista √† disposi√ß√£o", "fretamento de ve√≠culos".

5.  **Cogest√£o Prisional:**
    * **Termos-chave**: "cogest√£o prisional", "gest√£o compartilhada de unidade prisional", "administra√ß√£o prisional".
    * **Sin√¥nimos**: "parceria na gest√£o de pres√≠dios", "gest√£o de estabelecimentos penais", "apoio √† gest√£o prisional".

6.  **Fornecimento de M√£o de Obra (Facilities):**
    * **Termos-chave**: "fornecimento de m√£o de obra", "terceiriza√ß√£o de servi√ßos", "m√£o de obra dedicada", "postos de trabalho".
    * **Sin√¥nimos**: "facilities", "apoio administrativo", "recepcionista", "porteiro", "copeiragem", "servi√ßos gerais".

7.  **Limpeza (Predial, Escolar e Hospitalar):**
    * **Termos-chave**: "limpeza predial", "limpeza escolar", "limpeza hospitalar", "limpeza".
    * **Sin√¥nimos**: "limpeza e conserva√ß√£o", "higieniza√ß√£o", "servi√ßos de limpeza",
        "Limpeza Predial": "conserva√ß√£o e limpeza", "higieniza√ß√£o de edif√≠cios", "limpeza de fachadas", "tratamento de piso".
        "Limpeza Escolar": "higieniza√ß√£o de escolas", "conserva√ß√£o de ambiente escolar".
        "Limpeza Hospitalar": "higieniza√ß√£o hospitalar", "limpeza e desinfec√ß√£o hospitalar", "limpeza terminal", "assepsia de ambientes", "gest√£o de res√≠duos de sa√∫de".

8.  **PPP e Concess√µes:**
    * **Termos-chave**: "ppp", "parceria p√∫blico-privada", "concess√£o administrativa", "concess√£o patrocinada", "ppi", "pmi".
    * **Sin√¥nimos**: "edital de manifesta√ß√£o de interesse", "procedimento de manifesta√ß√£o de interesse".

9.  **Engenharia (Constru√ß√£o, Reforma, Manuten√ß√£o):**
    * **Termos-chave**: "engenharia", "constru√ß√£o civil", "reforma predial", "manuten√ß√£o predial", "obras".
    * **Sin√¥nimos**: "servi√ßos de engenharia", "edifica√ß√µes", "infraestrutura predial", "manuten√ß√£o preventiva", "manuten√ß√£o corretiva".

**Modalidades de Licita√ß√£o Conhecidas**: "Leil√£o Eletr√¥nico", "Leil√£o Presencial", "Di√°logo Competitivo", "Concurso", "Concorr√™ncia Eletr√¥nica", "Concorr√™ncia Presencial", "Preg√£o Eletr√¥nico", "Preg√£o Presencial", "Dispensa de Licita√ß√£o", "Inexigibilidade de Licita√ß√£o", "Manifesta√ß√£o de Interesse", "Pr√©-qualifica√ß√£o", "Credenciamento".
</CONTEXT>

<RULES>
1.  **Mapeamento de Termos**: Se a pergunta do usu√°rio corresponder a um ou mais ramos de atua√ß√£o, popule 'palavrasChave' com os "Termos-chave" e 'sinonimos' com os "Sin√¥nimos" dos ramos correspondentes.
2.  **Datas**: Hoje √© ${dataAtualFormatada}. Use o formato YYYY-MM-DD. Se nenhum per√≠odo for mencionado, 'dataInicial' e 'dataFinal' devem ser null.
3.  **Valores**: Interprete "1 milh√£o" como 1000000. "acima de X" √© 'valorMin', "abaixo de X" √© 'valorMax'.
4.  **Estado**: Retorne a sigla em mai√∫sculas (ex: "S√£o Paulo" -> "SP").
5.  **Modalidade**: Identifique a modalidade da lista "Modalidades de Licita√ß√£o Conhecidas".
6.  **Blacklist**: Extraia termos que o usu√°rio explicitamente N√ÉO deseja ver (indicados por "excluindo", "exceto", "nada de", "sem"). Popule o array 'blacklist' com esses termos. N√£o adicione nenhum outro termo a este array.
7.  **Smart Blacklist**: Se a pergunta focar **claramente em UM √öNICO ramo de atua√ß√£o**, preencha smartBlacklist com os "Termos-chave" e "Sin√¥nimos" dos **OUTROS** ramos. Caso contr√°rio, deixe o array vazio.
</RULES>

<OUTPUT_FORMAT>
Sua √∫nica sa√≠da deve ser um objeto JSON v√°lido, aderindo √† seguinte estrutura:
{
  "palavrasChave": ["string"],
  "sinonimos": [["string"]],
  "valorMin": number | null,
  "valorMax": number | null,
  "estado": string | null,
  "modalidade": string | null,
  "dataInicial": string | null,
  "dataFinal": string | null,
  "blacklist": ["string"],
  "smartBlacklist": ["string"]
}
</OUTPUT_FORMAT>
---
Agora, analise a pergunta abaixo e retorne APENAS o objeto JSON correspondente.
Pergunta do Usu√°rio: "${question}"
`;
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await generateContentWithRetry(model, prompt);

    const response = await result.response;
    const text = response.text();

    if (!text) throw new Error('Falha ao extrair filtros: resposta da IA vazia');

    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) throw new Error('Resposta da IA n√£o cont√©m um objeto JSON v√°lido.');

    const jsonText = jsonMatch[0];
    const parsedResponse = JSON.parse(jsonText) as Partial<ExtractedFilters>;
    const validatedResponse: ExtractedFilters = { ...defaultResponse };

    if (Array.isArray(parsedResponse.palavrasChave)) validatedResponse.palavrasChave = parsedResponse.palavrasChave.filter(kw => typeof kw === 'string');
    if (Array.isArray(parsedResponse.sinonimos)) validatedResponse.sinonimos = parsedResponse.sinonimos.map(s => Array.isArray(s) ? s.filter(i => typeof i === 'string') : []);
    if (typeof parsedResponse.valorMin === 'number') validatedResponse.valorMin = parsedResponse.valorMin;
    if (typeof parsedResponse.valorMax === 'number') validatedResponse.valorMax = parsedResponse.valorMax;
    if (typeof parsedResponse.estado === 'string') validatedResponse.estado = parsedResponse.estado.toUpperCase().trim();
    if (typeof parsedResponse.modalidade === 'string') validatedResponse.modalidade = parsedResponse.modalidade.trim();
    if (typeof parsedResponse.dataInicial === 'string') validatedResponse.dataInicial = parsedResponse.dataInicial;
    if (typeof parsedResponse.dataFinal === 'string') validatedResponse.dataFinal = parsedResponse.dataFinal;

    const explicitBlacklist = Array.isArray(parsedResponse.blacklist) ? parsedResponse.blacklist.filter(item => typeof item === 'string').map(item => item.toLowerCase()) : [];
    validatedResponse.blacklist = [...new Set([...userBlacklist.map(term => term.toLowerCase()), ...explicitBlacklist])];

    if (Array.isArray(parsedResponse.smartBlacklist)) validatedResponse.smartBlacklist = parsedResponse.smartBlacklist.filter(item => typeof item === 'string').map(item => item.toLowerCase());

    console.log("‚úÖ Filtros extra√≠dos e validados:", validatedResponse);
    return validatedResponse;

  } catch (error: unknown) {
    console.error('‚ùå Erro em extractFilters:', error);
    if (error instanceof Error) {
      throw new Error(`Falha na comunica√ß√£o com a IA Gemini: ${error.message}`);
    }
    throw new Error("Ocorreu um erro desconhecido durante a extra√ß√£o de filtros.");
  }
}