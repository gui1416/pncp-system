// src/lib/extractFilters.ts
import { GoogleGenerativeAI, GoogleGenerativeAIError } from '@google/generative-ai';
import { format } from 'date-fns';

if (!process.env.GOOGLE_API_KEY) {
  console.error("‚ùå FATAL: GOOGLE_API_KEY n√£o est√° definida nas vari√°veis de ambiente.");
  throw new Error('GOOGLE_API_KEY n√£o est√° definida nas vari√°veis de ambiente');
}

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

export interface ExtractedFilters {
  palavrasChave: string[];
  sinonimos: string[][];
  valorMin: number | null;
  valorMax: number | null;
  estado: string | null;
  modalidade: string | null;
  dataInicial: string | null;
  dataFinal: string | null;
  blacklist: string[];
  smartBlacklist: string[];
}


const FIXED_GLOBAL_BLACKLIST = [
  "teste",
  "simula√ß√£o",
  "cancelado",
  "leil√£o"
];

export async function extractFilters(question: string): Promise<ExtractedFilters> {
  const defaultResponse: ExtractedFilters = {
    palavrasChave: [],
    sinonimos: [],
    valorMin: null,
    valorMax: null,
    estado: null,
    modalidade: null,
    dataInicial: null,
    dataFinal: null,
    blacklist: [],
    smartBlacklist: [],
  };

  if (!question || typeof question !== 'string' || !question.trim()) {
    console.warn("‚ö†Ô∏è extractFilters chamada com pergunta inv√°lida.");
    return defaultResponse;
  }
  console.log(`üß† Chamando Gemini para extrair filtros de: "${question}"`);

  const hoje = new Date();
  const dataAtualFormatada = format(hoje, 'yyyy-MM-dd');

  // --- PROMPT OTIMIZADO ---
  const prompt = `
<MISSION>
Voc√™ √© um assistente de IA altamente especializado, focado em analisar perguntas sobre licita√ß√µes p√∫blicas no Brasil. Sua √∫nica fun√ß√£o √© extrair informa√ß√µes da pergunta do usu√°rio e convert√™-las em um objeto JSON estrito, sem qualquer texto, explica√ß√£o ou markdown adicional.
</MISSION>

<CONTEXT>
A data de refer√™ncia (hoje) √©: ${dataAtualFormatada}.

A seguir est√£o os ramos de atua√ß√£o da empresa. Use esta lista como sua base de conhecimento principal para mapear os termos da pergunta do usu√°rio.

1.  **Alimenta√ß√£o Prisional:**
    * **Termos-chave**: "alimenta√ß√£o prisional", "refei√ß√µes para pres√≠dios", "fornecimento de alimenta√ß√£o para unidades prisionais", "nutri√ß√£o prisional".
    * **Sin√¥nimos**: "alimenta√ß√£o para detentos", "gest√£o de refeit√≥rio prisional", "kit lanche para sistema prisional", "refei√ß√µes transportadas para pres√≠dios".

2.  **Alimenta√ß√£o Hospitalar:**
    * **Termos-chave**: "alimenta√ß√£o hospitalar", "refei√ß√µes para hospitais", "servi√ßos de nutri√ß√£o hospitalar", "dieta hospitalar".
    * **Sin√¥nimos**: "gest√£o de refeit√≥rio hospitalar", "nutri√ß√£o cl√≠nica", "alimenta√ß√£o enteral", "fornecimento de dietas para pacientes".

3.  **Merenda ou Alimenta√ß√£o Escolar:**
    * **Termos-chave**: "merenda escolar", "alimenta√ß√£o escolar", "refei√ß√µes para escolas", "PNAE", "programa nacional de alimenta√ß√£o escolar".
    * **Sin√¥nimos**: "fornecimento de merenda", "gest√£o de cantina escolar", "refeit√≥rio escolar", "kit merenda".

4.  **Frota com Motorista:**
    * **Termos-chave**: "loca√ß√£o de frota com motorista", "aluguel de ve√≠culos com condutor", "transporte executivo", "terceiriza√ß√£o de frota".
    * **Sin√¥nimos**: "servi√ßos de motorista", "transporte de passageiros", "ve√≠culos com motorista √† disposi√ß√£o", "fretamento de ve√≠culos".

5.  **Cogest√£o Prisional:**
    * **Termos-chave**: "cogest√£o prisional", "gest√£o compartilhada de unidade prisional", "administra√ß√£o prisional".
    * **Sin√¥nimos**: "parceria na gest√£o de pres√≠dios", "gest√£o de estabelecimentos penais", "apoio √† gest√£o prisional".

6.  **Fornecimento de M√£o de Obra (Facilities):**
    * **Termos-chave**: "fornecimento de m√£o de obra", "terceiriza√ß√£o de servi√ßos", "m√£o de obra dedicada", "postos de trabalho".
    * **Sin√¥nimos**: "facilities", "apoio administrativo", "recepcionista", "porteiro", "copeiragem", "servi√ßos gerais".

7.  **Limpeza (Predial, Escolar e Hospitalar):**
    * **Termos-chave**: "limpeza predial", "limpeza escolar", "limpeza hospitalar", "limpeza".
    * **Sin√¥nimos**: "limpeza e conserva√ß√£o", "higieniza√ß√£o", "servi√ßos de limpeza",
        "Limpeza Predial": "conserva√ß√£o e limpeza", "higieniza√ß√£o de edif√≠cios", "limpeza de fachadas", "tratamento de piso".
        "Limpeza Escolar": "higieniza√ß√£o de escolas", "conserva√ß√£o de ambiente escolar".
        "Limpeza Hospitalar": "higieniza√ß√£o hospitalar", "limpeza e desinfec√ß√£o hospitalar", "limpeza terminal", "assepsia de ambientes", "gest√£o de res√≠duos de sa√∫de".

8.  **PPP e Concess√µes:**
    * **Termos-chave**: "ppp", "parceria p√∫blico-privada", "concess√£o administrativa", "concess√£o patrocinada", "ppi", "pmi".
    * **Sin√¥nimos**: "edital de manifesta√ß√£o de interesse", "procedimento de manifesta√ß√£o de interesse".

9.  **Engenharia (Constru√ß√£o, Reforma, Manuten√ß√£o):**
    * **Termos-chave**: "engenharia", "constru√ß√£o civil", "reforma predial", "manuten√ß√£o predial", "obras".
    * **Sin√¥nimos**: "servi√ßos de engenharia", "edifica√ß√µes", "infraestrutura predial", "manuten√ß√£o preventiva", "manuten√ß√£o corretiva".

**Modalidades de Licita√ß√£o Conhecidas**: "Preg√£o Eletr√¥nico", "Preg√£o Presencial", "Concorr√™ncia", "Tomada de Pre√ßos", "Convite", "Leil√£o", "Concurso".

<GLOBAL_EXCLUSIONS>
Os seguintes termos NUNCA devem aparecer em nenhuma licita√ß√£o, independentemente da pergunta do usu√°rio. Eles devem ser SEMPRE inclu√≠dos na 'blacklist' de sa√≠da:
- ${FIXED_GLOBAL_BLACKLIST.map(term => `"${term}"`).join('\n- ')}
</GLOBAL_EXCLUSIONS>
</CONTEXT>

<RULES>
1.  **Mapeamento de Termos**:
    * Popule 'palavrasChave' com os termos exatos da pergunta e os "Termos-chave" dos ramos correspondentes.
    * Popule 'sinonimos' com os "Sin√¥nimos" dos ramos.
    * Se m√∫ltiplos ramos forem identificados, combine seus termos e sin√¥nimos.

2.  **Extra√ß√£o de Datas**:
    * A data de hoje √© ${dataAtualFormatada}. Use sempre o formato YYYY-MM-DD.
    * "√∫ltimos X dias": dataFinal √© hoje, dataInicial √© hoje - X dias.
    * "hoje": dataInicial e dataFinal s√£o ${dataAtualFormatada}.
    * Se um per√≠odo expl√≠cito for dado (ex: "de 01/07/2025 a 15/07/2025"), use-o.
    * Se nenhum per√≠odo for mencionado, 'dataInicial' e 'dataFinal' devem ser null.

3.  **Extra√ß√£o de Valores**:
    * Interprete valores como "1 milh√£o" (1000000), "500 mil" (500000).
    * "acima de X" ou "a partir de X": preencha 'valorMin'.
    * "abaixo de X" ou "at√© X": preencha 'valorMax'.
    * "entre X e Y": preencha 'valorMin' e 'valorMax'.

4.  **Extra√ß√£o de Estado**:
    * Identifique o estado brasileiro mencionado. Retorne a sigla em mai√∫sculas (ex: "S√£o Paulo" -> "SP", "Rio" -> "RJ"). Se n√£o houver men√ß√£o, retorne null.

5.  **Extra√ß√£o de Modalidade**:
    * Identifique modalidades de licita√ß√£o da lista "Modalidades de Licita√ß√£o Conhecidas". Se n√£o houver men√ß√£o, retorne null.

6.  **Filtros de Rejei√ß√£o (Blacklist e Smart Blacklist)**:
    * **Blacklist**:
        * Sempre inclua os termos de <GLOBAL_EXCLUSIONS> no array blacklist.
        * Extraia termos que o usu√°rio explicitamente N√ÉO deseja ver nos resultados (indicados por "excluindo", "exceto", "nada de", "sem"). Adicione-os ao array blacklist.
        * Se um termo na blacklist for uma "Modalidade de Licita√ß√£o Conhecida", ele tamb√©m deve ser usado para filtrar modalidades no processamento posterior.
    * **Smart Blacklist (Infer√™ncia Contextual)**:
        * Se a pergunta do usu√°rio focar **claramente em UM √öNICO ramo de atua√ß√£o** (identificado pelas 'palavrasChave' e 'sinonimos'), preencha smartBlacklist com os "Termos-chave" e "Sin√¥nimos" dos **OUTROS ramos de atua√ß√£o** que N√ÉO foram identificados na pergunta principal.
        * Por exemplo, se a pergunta √© "licita√ß√£o de limpeza", e *apenas* o ramo "Limpeza" foi identificado nas 'palavrasChave', ent√£o termos de "Alimenta√ß√£o Prisional", "Frota com Motorista", etc., devem ser adicionados ao smartBlacklist.
        * Esta infer√™ncia s√≥ deve ocorrer se a identifica√ß√£o do ramo principal for forte e singular.

</RULES>

<OUTPUT_FORMAT>
Sua √∫nica sa√≠da deve ser um objeto JSON v√°lido, aderindo estritamente √† seguinte estrutura. N√£o inclua texto ou markdown antes ou depois do JSON.

{
  "palavrasChave": ["string"],
  "sinonimos": [["string"]],
  "valorMin": number | null,
  "valorMax": number | null,
  "estado": string | null,
  "modalidade": string | null,
  "dataInicial": string | null,
  "dataFinal": string | null,
  "blacklist": ["string"],
  "smartBlacklist": ["string"]
}
</OUTPUT_FORMAT>

<PROCESS_AND_EXAMPLES>
Analise a pergunta do usu√°rio e siga as regras para gerar o JSON.

**Exemplo 1 (Cen√°rio: hoje √© 2025-06-11)**
Pergunta: "Preg√£o eletr√¥nico para limpeza hospitalar e tamb√©m merenda para escolas no estado de SP dos √∫ltimos 7 dias, acima de 1 milh√£o, exceto limpeza de fachadas e sem incluir qualquer tipo de material descart√°vel"
JSON de Sa√≠da:
{
  "palavrasChave": ["preg√£o eletr√¥nico", "limpeza hospitalar", "merenda escolar", "alimenta√ß√£o escolar"],
  "sinonimos": [["higieniza√ß√£o hospitalar", "desinfec√ß√£o hospitalar"], ["fornecimento de merenda", "pnae"]],
  "valorMin": 1000000,
  "valorMax": null,
  "estado": "SP",
  "modalidade": "Preg√£o Eletr√¥nico",
  "dataInicial": "2025-06-04",
  "dataFinal": "2025-06-11",
  "blacklist": ["teste", "simula√ß√£o", "cancelado", "limpeza de fachadas"], // Inclui fixos e os extra√≠dos
  "smartBlacklist": [] // Smart Blacklist vazio pois m√∫ltiplos ramos (limpeza e merenda) foram identificados
}

**Exemplo 2**
Pergunta: "obras de engenharia no Rio de Janeiro, mas nada de reformas"
JSON de Sa√≠da:
{
  "palavrasChave": ["obras de engenharia", "constru√ß√£o civil", "reforma predial", "manuten√ß√£o predial"],
  "sinonimos": [["servi√ßos de engenharia", "edifica√ß√µes", "infraestrutura predial", "manuten√ß√£o preventiva", "manuten√ß√£o corretiva"]],
  "valorMin": null,
  "valorMax": null,
  "estado": "RJ",
  "modalidade": null,
  "dataInicial": null,
  "dataFinal": null,
  "blacklist": ["teste", "simula√ß√£o", "cancelado", "reformas"], // Inclui fixos e os extra√≠dos
  "smartBlacklist": ["alimenta√ß√£o prisional", /* ... outros termos de outros ramos ... */ ] // Inferido
}

**Exemplo 3**
Pergunta: "Traga licita√ß√µes de limpeza de S√£o Paulo, exceto leil√£o"
JSON de Sa√≠da:
{
  "palavrasChave": ["limpeza predial", "limpeza escolar", "limpeza hospitalar"],
  "sinonimos": [["conserva√ß√£o e limpeza", "higieniza√ß√£o de edif√≠cios", "limpeza de fachadas", "tratamento de piso"], ["higieniza√ß√£o de escolas", "conserva√ß√£o de ambiente escolar"], ["higieniza√ß√£o hospitalar", "limpeza e desinfec√ß√£o hospitalar", "limpeza terminal", "assepsia de ambientes", "gest√£o de res√≠duos de sa√∫de"]],
  "valorMin": null,
  "valorMax": null,
  "estado": "SP",
  "modalidade": null,
  "dataInicial": null,
  "dataFinal": null,
  "blacklist": ["teste", "simula√ß√£o", "cancelado", "leil√£o"], // Inclui fixos e os extra√≠dos
  "smartBlacklist": ["alimenta√ß√£o prisional", /* ... outros termos de outros ramos ... */ ] // Inferido
}

</PROCESS_AND_EXAMPLES>

---
Agora, analise a pergunta abaixo e retorne APENAS o objeto JSON correspondente.
Pergunta do Usu√°rio: "${question}"
`;
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    if (!text) throw new Error('Falha ao extrair filtros: resposta da IA vazia');

    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) throw new Error('Resposta da IA n√£o parece conter um objeto JSON v√°lido.');

    const jsonText = jsonMatch[0];
    const parsedResponse = JSON.parse(jsonText) as Partial<ExtractedFilters>;
    const validatedResponse: ExtractedFilters = { ...defaultResponse };

    if (Array.isArray(parsedResponse.palavrasChave)) validatedResponse.palavrasChave = parsedResponse.palavrasChave.filter(kw => typeof kw === 'string');
    if (Array.isArray(parsedResponse.sinonimos)) validatedResponse.sinonimos = parsedResponse.sinonimos.map(s => Array.isArray(s) ? s.filter(i => typeof i === 'string') : []);
    if (typeof parsedResponse.valorMin === 'number') validatedResponse.valorMin = parsedResponse.valorMin;
    if (typeof parsedResponse.valorMax === 'number') validatedResponse.valorMax = parsedResponse.valorMax;
    if (typeof parsedResponse.estado === 'string') validatedResponse.estado = parsedResponse.estado.toUpperCase().trim();
    if (typeof parsedResponse.modalidade === 'string') validatedResponse.modalidade = parsedResponse.modalidade.trim();
    if (typeof parsedResponse.dataInicial === 'string') validatedResponse.dataInicial = parsedResponse.dataInicial;
    if (typeof parsedResponse.dataFinal === 'string') validatedResponse.dataFinal = parsedResponse.dataFinal;

    // Process new blacklist and smartBlacklist fields
    const explicitBlacklist = Array.isArray(parsedResponse.blacklist) ? parsedResponse.blacklist.filter(item => typeof item === 'string').map(item => item.toLowerCase()) : [];
    // Combina a blacklist expl√≠cita com a blacklist fixa global, removendo duplicatas
    validatedResponse.blacklist = [...new Set([...FIXED_GLOBAL_BLACKLIST.map(term => term.toLowerCase()), ...explicitBlacklist])];

    if (Array.isArray(parsedResponse.smartBlacklist)) validatedResponse.smartBlacklist = parsedResponse.smartBlacklist.filter(item => typeof item === 'string').map(item => item.toLowerCase());


    console.log("‚úÖ Filtros extra√≠dos e validados:", validatedResponse);
    return validatedResponse;

  } catch (error: unknown) {
    console.error('‚ùå Erro em extractFilters:', error);
    if (error instanceof GoogleGenerativeAIError) {
      throw new Error(`Falha na comunica√ß√£o com a IA Gemini: ${error.message}`);
    }
    throw error;
  }
}